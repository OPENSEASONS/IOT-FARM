<!DOCTYPE html>
<html>
<head>
    <title>LoRa Mesh Network with Sensor Data</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.min.js"></script>
    <style>
        body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
        #container { display: flex; }
        #visualization { flex: 2; }
        #sensorData { flex: 1; padding: 20px; background: #f0f0f0; }
        .sensor-reading { margin: 10px 0; padding: 10px; background: white; border-radius: 5px; }
        .moisture-bar { height: 20px; background: #ddd; border-radius: 10px; margin: 5px 0; }
        .moisture-fill { height: 100%; background: #4CAF50; border-radius: 10px; }
    </style>
</head>
<body>
    <h1>LoRa Mesh Network with Soil Moisture Sensors</h1>
    <div id="container">
        <div id="visualization"></div>
        <div id="sensorData">
            <h3>Sensor Readings</h3>
            <div id="sensorReadings"></div>
        </div>
    </div>

    <script>
        let nodes = {};
        let sensorData = {};
        const nodePositions = {
            1: { x: 200, y: 200, color: [255, 0, 0] },    // Red - Master Gateway
            2: { x: 400, y: 200, color: [255, 255, 0] },  // Yellow
            3: { x: 300, y: 350, color: [0, 255, 0] },    // Green  
            4: { x: 500, y: 200, color: [0, 0, 255] }     // Blue
        };

        const connectionColors = {
            1: [255, 0, 0],    // Red
            2: [255, 255, 0],  // Yellow
            3: [0, 255, 0],    // Green
            4: [0, 0, 255]     // Blue
        };

        function setup() {
            createCanvas(800, 600).parent('visualization');
            connectMQTT();
        }

        function connectMQTT() {
            const client = mqtt.connect('wss://your-mqtt-server:8884', {
                username: 'your-username',
                password: 'your-password'
            });

            client.on('connect', () => {
                console.log('Connected to MQTT');
                client.subscribe('lora_mesh/routing_data');
                client.subscribe('lora_mesh/sensor_data');
            });

            client.on('message', (topic, message) => {
                try {
                    const data = JSON.parse(message.toString());
                    if (topic === 'lora_mesh/routing_data') {
                        updateNodeData(data);
                    } else if (topic === 'lora_mesh/sensor_data') {
                        updateSensorData(data);
                    }
                } catch (e) {
                    console.error('Error parsing MQTT message:', e);
                }
            });
        }

        function updateNodeData(data) {
            const nodeId = data.node;
            const routingData = JSON.parse(data.routing_table);
            
            nodes[nodeId] = {
                id: nodeId,
                routingTable: routingData,
                timestamp: data.timestamp,
                lastUpdate: Date.now()
            };
        }

        function updateSensorData(data) {
            const nodeId = data.node;
            sensorData[nodeId] = {
                moisture: data.sensor_data,
                rawValue: data.raw_value,
                timestamp: data.timestamp,
                lastUpdate: Date.now()
            };
            updateSensorDisplay();
        }

        function updateSensorDisplay() {
            const container = document.getElementById('sensorReadings');
            container.innerHTML = '';
            
            for (let nodeId in sensorData) {
                const data = sensorData[nodeId];
                const nodeColor = `rgb(${nodePositions[nodeId].color.join(',')})`;
                
                const readingDiv = document.createElement('div');
                readingDiv.className = 'sensor-reading';
                readingDiv.style.borderLeft = `4px solid ${nodeColor}`;
                
                readingDiv.innerHTML = `
                    <strong>Node ${nodeId} - Soil Moisture</strong>
                    <div style="font-size: 24px; color: ${nodeColor}">${data.moisture}%</div>
                    <div class="moisture-bar">
                        <div class="moisture-fill" style="width: ${data.moisture}%"></div>
                    </div>
                    <small>Raw: ${data.rawValue} | Updated: ${new Date(data.lastUpdate).toLocaleTimeString()}</small>
                `;
                
                container.appendChild(readingDiv);
            }
        }

        function draw() {
            background(240);
            drawConnections();
            drawNodes();
            drawLegend();
        }

        function drawConnections() {
            for (let nodeId in nodes) {
                const node = nodes[nodeId];
                const fromPos = nodePositions[nodeId];
                const lineColor = connectionColors[nodeId];
                
                stroke(lineColor[0], lineColor[1], lineColor[2]);
                strokeWeight(2);
                
                node.routingTable.forEach((route, index) => {
                    const targetNodeId = index + 1;
                    const toPos = nodePositions[targetNodeId];
                    
                    if (route.n === 255 || route.n === 0) return;
                    
                    if (route.n === parseInt(targetNodeId)) {
                        // Direct connection
                        line(fromPos.x, fromPos.y, toPos.x, toPos.y);
                        drawRSSI(fromPos, toPos, route.r, lineColor);
                    } else {
                        // Indirect connection
                        drawDottedLine(fromPos, toPos, lineColor, route.n);
                    }
                });
            }
        }

        function drawDottedLine(fromPos, toPos, color, viaNode) {
            stroke(color[0], color[1], color[2]);
            strokeWeight(1);
            drawingContext.setLineDash([5, 5]);
            
            line(fromPos.x, fromPos.y, toPos.x, toPos.y);
            
            drawingContext.setLineDash([]);
            const dotColor = connectionColors[viaNode];
            fill(dotColor[0], dotColor[1], dotColor[2]);
            noStroke();
            
            const midX = (fromPos.x + toPos.x) / 2;
            const midY = (fromPos.y + toPos.y) / 2;
            ellipse(midX, midY, 8, 8);
        }

        function drawRSSI(fromPos, toPos, rssi, color) {
            if (rssi === 0) return;
            
            const midX = (fromPos.x + toPos.x) / 2;
            const midY = (fromPos.y + toPos.y) / 2;
            
            fill(color[0], color[1], color[2]);
            noStroke();
            textAlign(CENTER);
            textSize(10);
            text(rssi + "dB", midX, midY - 10);
        }

        function drawNodes() {
            for (let nodeId in nodePositions) {
                const pos = nodePositions[nodeId];
                const color = nodePositions[nodeId].color;
                const nodeData = nodes[nodeId];
                const sensor = sensorData[nodeId];
                
                // Node circle with sensor data
                fill(color[0], color[1], color[2]);
                stroke(0);
                strokeWeight(2);
                ellipse(pos.x, pos.y, 50, 50);
                
                // Node ID
                fill(255);
                noStroke();
                textAlign(CENTER, CENTER);
                textSize(14);
                text("Node " + nodeId, pos.x, pos.y - 5);
                
                // Sensor value if available
                if (sensor) {
                    textSize(12);
                    text(sensor.moisture + "%", pos.x, pos.y + 15);
                }
                
                // Status indicator
                if (nodeData && Date.now() - nodeData.lastUpdate < 15000) {
                    fill(0, 255, 0); // Green - online
                } else {
                    fill(255, 0, 0); // Red - offline
                }
                ellipse(pos.x + 20, pos.y - 20, 10, 10);
            }
        }

        function drawLegend() {
            fill(0);
            noStroke();
            textAlign(LEFT);
            textSize(12);
            text("LoRa Mesh Network with Soil Moisture Sensors", 20, 30);
            text("Solid lines: Direct connections", 20, 50);
            text("Dotted lines: Indirect connections", 20, 70);
            text("Numbers: RSSI values in dBm | Moisture %", 20, 90);
        }
    </script>
</body>
</html>